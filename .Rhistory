library(lmerTest)
model2 = lmer(mV ~`Visit Number`* Arm + Muscle +(1|Code), data = data)
summary(model2)
#
# # Fit the model
# model_interaction <- lmer(mV ~ Visit_Number * Arm + Muscle + (1 | Code), data = data)
#
# # Print the model summary
# summary_interaction <- summary(model_interaction)
# print(summary_interaction)
#
# # Interpretation of Interaction
# # If `Visit_Number:Arm` has a significant p-value (e.g., p < 0.05)
# if (summary_interaction$coefficients['Visit_Number2:ArmStim', 'Pr(>|t|)'] < 0.05) {
#   print("The interaction between Visit Number and Arm is statistically significant, indicating that the effect of Arm differs across Visit Numbers.")
# } else {
#   print("No significant interaction between Visit Number and Arm.")
# }
#
# # Interpretation of Muscle effect
# if (summary_interaction$coefficients['MuscleTA', 'Pr(>|t|)'] < 0.05) {
#   print("There is a significant difference in mV between Muscle types, with TA Muscle showing a different impact compared to FDI.")
# } else {
#   print("No significant difference between Muscle types.")
# }
#
"Interpretation of the Interaction Between Visit Number and Arm"
"Estimate: The interaction term (Visit Number:ArmStim) has an estimate of 46.534, suggesting that the effect of the Stim arm over the Sham arm changes by this value across the visits. This indicates that the difference between the Stim and Sham arms' impact on mV values increases significantly with each visit."
"P value: The P value for the interaction term is 0.000391, which is statistically significant (well below the threshold of 0.05). This signifies that the interaction effect between the Visit Number and Arm on mV is statistically robust, confirming that the treatment effect varies across different visits."
library(lmerTest)
model2 = lmer(mV ~`Visit Number`* Arm + Muscle +(1|Code), data = data)
summary(model2)
#
# # Fit the model
# model_interaction <- lmer(mV ~ Visit_Number * Arm + Muscle + (1 | Code), data = data)
#
# # Print the model summary
# summary_interaction <- summary(model_interaction)
# print(summary_interaction)
#
# # Interpretation of Interaction
# # If `Visit_Number:Arm` has a significant p-value (e.g., p < 0.05)
# if (summary_interaction$coefficients['Visit_Number2:ArmStim', 'Pr(>|t|)'] < 0.05) {
#   print("The interaction between Visit Number and Arm is statistically significant, indicating that the effect of Arm differs across Visit Numbers.")
# } else {
#   print("No significant interaction between Visit Number and Arm.")
# }
#
# # Interpretation of Muscle effect
# if (summary_interaction$coefficients['MuscleTA', 'Pr(>|t|)'] < 0.05) {
#   print("There is a significant difference in mV between Muscle types, with TA Muscle showing a different impact compared to FDI.")
# } else {
#   print("No significant difference between Muscle types.")
# }
#
"Interpretation of the Interaction Between Visit Number and Arm"
"Estimate: The interaction term (Visit Number:ArmStim) has an estimate of 46.534, suggesting that the effect of the Stim arm over the Sham arm changes by this value across the visits. This indicates that the difference between the Stim and Sham arms' impact on mV values increases significantly with each visit."
"P value: The P value for the interaction term is 0.000391, which is statistically significant (well below the threshold of 0.05). This signifies that the interaction effect between the Visit Number and Arm on mV is statistically robust, confirming that the treatment effect varies across different visits."
"Interpretation of the Estimate and P Value for Muscle"
"Estimate: The estimate for MuscleTA is 15.428, indicating that the TA muscle, compared to the baseline muscle (presumably another muscle not specified here), shows an increase in mV by this value."
"P value: The P value for MuscleTA is 0.016411, which is also below the 0.05 significance level. This result is statistically significant, suggesting that there is indeed a significant difference in mV measurements between the TA muscle and the baseline muscle.
"
library(lmerTest)
model2 = lmer(mV ~`Visit Number`* Arm + Muscle +(1|Code), data = data)
summary(model2)
#
# # Fit the model
# model_interaction <- lmer(mV ~ Visit_Number * Arm + Muscle + (1 | Code), data = data)
#
# # Print the model summary
# summary_interaction <- summary(model_interaction)
# print(summary_interaction)
#
# # Interpretation of Interaction
# # If `Visit_Number:Arm` has a significant p-value (e.g., p < 0.05)
# if (summary_interaction$coefficients['Visit_Number2:ArmStim', 'Pr(>|t|)'] < 0.05) {
#   print("The interaction between Visit Number and Arm is statistically significant, indicating that the effect of Arm differs across Visit Numbers.")
# } else {
#   print("No significant interaction between Visit Number and Arm.")
# }
#
# # Interpretation of Muscle effect
# if (summary_interaction$coefficients['MuscleTA', 'Pr(>|t|)'] < 0.05) {
#   print("There is a significant difference in mV between Muscle types, with TA Muscle showing a different impact compared to FDI.")
# } else {
#   print("No significant difference between Muscle types.")
# }
#
"Interpretation of the Interaction Between Visit Number and Arm"
"Estimate: The interaction term (Visit Number:ArmStim) has an estimate of 46.534, suggesting that the effect of the Stim arm over the Sham arm changes by this value across the visits. This indicates that the difference between the Stim and Sham arms' impact on mV values increases significantly with each visit."
"P value: The P value for the interaction term is 0.000391, which is statistically significant (well below the threshold of 0.05). This signifies that the interaction effect between the Visit Number and Arm on mV is statistically robust, confirming that the treatment effect varies across different visits."
"Interpretation of the Estimate and P Value for Muscle"
"Estimate: The estimate for MuscleTA is 15.428, indicating that the TA muscle, compared to the baseline muscle (presumably another muscle not specified here), shows an increase in mV by this value."
"P value: The P value for MuscleTA is 0.016411, which is also below the 0.05 significance level. This result is statistically significant, suggesting that there is indeed a significant difference in mV measurements between the TA muscle and the baseline muscle."
"Conclusion: The model demonstrates significant interactions between Visit Number and Arm, indicating varying treatment effects over different visits. Additionally, there is a significant difference in mV values between muscles, with the TA muscle showing higher values compared to the baseline."
# Define the observation vector
x <- c(5.0, 5.0, 1)
# Calculate class probabilities
probabilities <- ClassProbability(x)
# Define the observation vector
x <- c(5.0, 5.0, 1)
# Calculate class probabilities
probabilities <- ClassProbability(x)
ClassProbability <- function(x) {
# Calculate log likelihoods for each class
logLikA <- LogLikA(x)
logLikB <- LogLikB(x)
logLikC <- LogLikC(x)
# Vector of log likelihoods
logLiks <- c(logLikA, logLikB, logLikC)
# Compute probabilities using the softmax function
maxLogLik <- max(logLiks)  # Avoid underflow by subtracting the max log likelihood
expLiks <- exp(logLiks - maxLogLik)
probabilities <- expLiks / sum(expLiks)
return(probabilities)
}
# Define the observation vector
x <- c(5.0, 5.0, 1)
# Calculate class probabilities
probabilities <- ClassProbability(x)
# Assuming GaussLogLik and BernoulliLogLik have been defined as before
LogLikA <- function(x) {
# x[1] and x[2] are Gaussian; x[3] is Bernoulli
logLik1 <- GaussLogLik(x[1], 7.0, 4.0)  # For x1 under A
logLik2 <- GaussLogLik(x[2], 1.0, 1.0)  # For x2 under A
logLik3 <- BernoulliLogLik(c(x[3]), 0.6)  # For x3 under A
totalLogLik <- logLik1 + logLik2 + logLik3
return(totalLogLik)
}
LogLikB <- function(x) {
# x[1] and x[2] are Gaussian; x[3] is Bernoulli
logLik1 <- GaussLogLik(x[1], 1.0, 1.0)  # For x1 under B
logLik2 <- GaussLogLik(x[2], 7.0, 4.0)  # For x2 under B
logLik3 <- BernoulliLogLik(c(x[3]), 0.8)  # For x3 under B
totalLogLik <- logLik1 + logLik2 + logLik3
return(totalLogLik)
}
LogLikC <- function(x) {
# x[1] and x[2] are Gaussian; x[3] is Bernoulli
logLik1 <- GaussLogLik(x[1], 1.0, 1.0)  # For x1 under C
logLik2 <- GaussLogLik(x[2], 1.0, 1.0)  # For x2 under C
logLik3 <- BernoulliLogLik(c(x[3]), 0.2)  # For x3 under C
totalLogLik <- logLik1 + logLik2 + logLik3
return(totalLogLik)
}
#
# # Assuming GaussLogLik and BernoulliLogLik are already defined as previously discussed
#
# # Function for Class A
# LogLikA <- function(x) {
#   # Parameters for Class A
#   m1_A <- 7.0
#   s1_A <- 4.0
#   m2_A <- 1.0
#   s2_A <- 1.0
#   p_A <- 0.6
#
#   # Gaussian log likelihood for x1 and x2
#   logLik_x1_A <- log(dnorm(x[1], mean = m1_A, sd = s1_A))
#   logLik_x2_A <- log(dnorm(x[2], mean = m2_A, sd = s2_A))
#
#   # Bernoulli log likelihood for x3
#   logLik_x3_A <- BernoulliLogLik(x[3], p_A)
#
#   # Total log likelihood
#   totalLogLik_A <- logLik_x1_A + logLik_x2_A + logLik_x3_A
#
#   return(totalLogLik_A)
# }
#
# # Function for Class B
# LogLikB <- function(x) {
#   # Parameters for Class B
#   m1_B <- 1.0
#   s1_B <- 1.0
#   m2_B <- 7.0
#   s2_B <- 4.0
#   p_B <- 0.8
#
#   logLik_x1_B <- log(dnorm(x[1], mean = m1_B, sd = s1_B))
#   logLik_x2_B <- log(dnorm(x[2], mean = m2_B, sd = s2_B))
#   logLik_x3_B <- BernoulliLogLik(x[3], p_B)
#
#   totalLogLik_B <- logLik_x1_B + logLik_x2_B + logLik_x3_B
#
#   return(totalLogLik_B)
# }
#
# # Function for Class C
# LogLikC <- function(x) {
#   # Parameters for Class C
#   m1_C <- 1.0
#   s1_C <- 1.0
#   m2_C <- 1.0
#   s2_C <- 1.0
#   p_C <- 0.2
#
#   logLik_x1_C <- log(dnorm(x[1], mean = m1_C, sd = s1_C))
#   logLik_x2_C <- log(dnorm(x[2], mean = m2_C, sd = s2_C))
#   logLik_x3_C <- BernoulliLogLik(x[3], p_C)
#
#   totalLogLik_C <- logLik_x1_C + logLik_x2_C + logLik_x3_C
#
#   return(totalLogLik_C)
# }
ClassProbability <- function(x) {
# Calculate log likelihoods for each class
logLikA <- LogLikA(x)
logLikB <- LogLikB(x)
logLikC <- LogLikC(x)
# Vector of log likelihoods
logLiks <- c(logLikA, logLikB, logLikC)
# Compute probabilities using the softmax function
maxLogLik <- max(logLiks)  # Avoid underflow by subtracting the max log likelihood
expLiks <- exp(logLiks - maxLogLik)
probabilities <- expLiks / sum(expLiks)
return(probabilities)
}
# Define the observation vector
x <- c(5.0, 5.0, 1)
# Calculate class probabilities
probabilities <- ClassProbability(x)
# # Define the function GaussLogLik
# GaussLogLik <- function(x, m, s) {
#   # Check if standard deviation is positive
#   if (s <= 0) {
#     stop("Standard deviation must be positive")
#   }
#
#   # Calculate the density for each x using the Gaussian formula
#   densities <- dnorm(x, mean = m, sd = s)
#
#   # Calculate the log of these densities
#   log_densities <- log(densities)
#
#   # Sum all the log densities to get the log likelihood
#   log_likelihood <- sum(log_densities)
#
#   # Return the log likelihood
#   return(log_likelihood)
# }
GaussLogLik <- function(x, m, s) {
# Calculate the log likelihood for a Gaussian distribution
n <- length(x)  # Number of samples in x
# Log likelihood calculation
log_lik <- sum(dnorm(x, mean = m, sd = s, log = TRUE))
return(log_lik)
}
# BernoulliLogLik <- function(x, p) {
#   if (p < 0 || p > 1) {
#     stop("Probability p must be between 0 and 1")
#   }
#
#   # Calculate number of successes and failures
#   n_s <- sum(x)               # Number of successes (1s)
#   n_f <- length(x) - n_s      # Number of failures (0s)
#
#   # Calculate the log likelihood
#   log_likelihood <- n_s * log(p) + n_f * log(1 - p)
#
#   return(log_likelihood)
# }
BernoulliLogLik <- function(x, p) {
# Ensure p is within the valid range
if (p < 0 || p > 1) {
stop("p must be between 0 and 1")
}
# Calculate the number of successes
n_s <- sum(x)
# Total number of trials
n <- length(x)
# Calculate the log likelihood
log_lik <- n_s * log(p) + (n - n_s) * log(1 - p)
return(log_lik)
}
# Assuming GaussLogLik and BernoulliLogLik have been defined as before
LogLikA <- function(x) {
# x[1] and x[2] are Gaussian; x[3] is Bernoulli
logLik1 <- GaussLogLik(x[1], 7.0, 4.0)  # For x1 under A
logLik2 <- GaussLogLik(x[2], 1.0, 1.0)  # For x2 under A
logLik3 <- BernoulliLogLik(c(x[3]), 0.6)  # For x3 under A
totalLogLik <- logLik1 + logLik2 + logLik3
return(totalLogLik)
}
LogLikB <- function(x) {
# x[1] and x[2] are Gaussian; x[3] is Bernoulli
logLik1 <- GaussLogLik(x[1], 1.0, 1.0)  # For x1 under B
logLik2 <- GaussLogLik(x[2], 7.0, 4.0)  # For x2 under B
logLik3 <- BernoulliLogLik(c(x[3]), 0.8)  # For x3 under B
totalLogLik <- logLik1 + logLik2 + logLik3
return(totalLogLik)
}
LogLikC <- function(x) {
# x[1] and x[2] are Gaussian; x[3] is Bernoulli
logLik1 <- GaussLogLik(x[1], 1.0, 1.0)  # For x1 under C
logLik2 <- GaussLogLik(x[2], 1.0, 1.0)  # For x2 under C
logLik3 <- BernoulliLogLik(c(x[3]), 0.2)  # For x3 under C
totalLogLik <- logLik1 + logLik2 + logLik3
return(totalLogLik)
}
#
# # Assuming GaussLogLik and BernoulliLogLik are already defined as previously discussed
#
# # Function for Class A
# LogLikA <- function(x) {
#   # Parameters for Class A
#   m1_A <- 7.0
#   s1_A <- 4.0
#   m2_A <- 1.0
#   s2_A <- 1.0
#   p_A <- 0.6
#
#   # Gaussian log likelihood for x1 and x2
#   logLik_x1_A <- log(dnorm(x[1], mean = m1_A, sd = s1_A))
#   logLik_x2_A <- log(dnorm(x[2], mean = m2_A, sd = s2_A))
#
#   # Bernoulli log likelihood for x3
#   logLik_x3_A <- BernoulliLogLik(x[3], p_A)
#
#   # Total log likelihood
#   totalLogLik_A <- logLik_x1_A + logLik_x2_A + logLik_x3_A
#
#   return(totalLogLik_A)
# }
#
# # Function for Class B
# LogLikB <- function(x) {
#   # Parameters for Class B
#   m1_B <- 1.0
#   s1_B <- 1.0
#   m2_B <- 7.0
#   s2_B <- 4.0
#   p_B <- 0.8
#
#   logLik_x1_B <- log(dnorm(x[1], mean = m1_B, sd = s1_B))
#   logLik_x2_B <- log(dnorm(x[2], mean = m2_B, sd = s2_B))
#   logLik_x3_B <- BernoulliLogLik(x[3], p_B)
#
#   totalLogLik_B <- logLik_x1_B + logLik_x2_B + logLik_x3_B
#
#   return(totalLogLik_B)
# }
#
# # Function for Class C
# LogLikC <- function(x) {
#   # Parameters for Class C
#   m1_C <- 1.0
#   s1_C <- 1.0
#   m2_C <- 1.0
#   s2_C <- 1.0
#   p_C <- 0.2
#
#   logLik_x1_C <- log(dnorm(x[1], mean = m1_C, sd = s1_C))
#   logLik_x2_C <- log(dnorm(x[2], mean = m2_C, sd = s2_C))
#   logLik_x3_C <- BernoulliLogLik(x[3], p_C)
#
#   totalLogLik_C <- logLik_x1_C + logLik_x2_C + logLik_x3_C
#
#   return(totalLogLik_C)
# }
ClassProbability <- function(x) {
# Calculate log likelihoods for each class
logLikA <- LogLikA(x)
logLikB <- LogLikB(x)
logLikC <- LogLikC(x)
# Vector of log likelihoods
logLiks <- c(logLikA, logLikB, logLikC)
# Compute probabilities using the softmax function
maxLogLik <- max(logLiks)  # Avoid underflow by subtracting the max log likelihood
expLiks <- exp(logLiks - maxLogLik)
probabilities <- expLiks / sum(expLiks)
return(probabilities)
}
# Define the observation vector
x <- c(5.0, 5.0, 1)
# Calculate class probabilities
probabilities <- ClassProbability(x)
# Print the probabilities for each class
print(probabilities)
# Determine which class has the highest probability
max_class <- which.max(probabilities)
class_names <- c("A", "B", "C")
most_likely_class <- class_names[max_class]
# Print the most likely class
print(paste("The observation x is most likely to have come from Class", most_likely_class))
# Create a new package in a directory of your choice
create_package(path = "/Users/liyunxiao/Desktop/BMI510/logLikBernoulliPkg")
install.packages("usethis")
# Create a new package in a directory of your choice
create_package(path = "/Users/liyunxiao/Desktop/BMI510/logLikBernoulliPkg")
Create a new package in a directory of your choice
# Create a new package in a directory of your choice
# create_package(path = "/Users/liyunxiao/Desktop/BMI510/logLikBernoulliPkg")
install.packages("devtools")
devtools::install_github("Momo23569/bmi510")
# If you don't have `remotes` installed:
install.packages("remotes")
# Try installing using `remotes`:
remotes::install_github("Momo23569/bmi510")
install.packages("remotes")
remotes::install_github("Momo23569/bmi510")
install.packages("survival")
# Call the function
survCurv(status, time)
source("/Users/liyunxiao/Desktop/BMI510/Final/R/Q2.R")
survCurv(c(1, 0, 1, 0, 1), c(5, 8, 12, 15, 20))
View(sim.data)
ls
cd desktop
devtool：：document（）
source("/Users/liyunxiao/Desktop/BMI510/Final/R/Q2.R")
print(head(survival_data))
source("~/Desktop/BMI510/Final/R/Q2.R")
source("~/Desktop/BMI510/Final/R/Q2.R")
# Combine status and time into a data frame
data <- data.frame(status = status, time = time)
library(dplyr)
library(ggplot2)
survCurv <- function(status, time) {
# Combine status and time into a data frame
data <- data.frame(status = status, time = time)
# Sort data by time
data <- data %>% arrange(time)
# Calculate number of events and censored cases at each time point
survival_data <- data %>%
group_by(time) %>%
summarise(n_events = sum(status == 1),
n_censored = sum(status == 0))
# Calculate survival probabilities
survival_data <- survival_data %>%
mutate(surv_prob = cumprod(1 - n_events / sum(n_events + n_censored)))
# Plot the survival curve
ggplot(survival_data, aes(x = time, y = surv_prob)) +
geom_step() +
labs(title = "Survival Curve",
x = "Time",
y = "Survival Probability")
}
# Example usage
status <- c(1, 0, 1, 0, 1)
time <- c(5, 8, 12, 15, 20)
survCurv(status, time)
# URL for the dataset
url <- "https://jlucasmckay.bmi.emory.edu/global/bmi510/Labs-Materials/survival.csv"
# Read the CSV file directly from the URL
survival_data <- read.csv(url)
print(head(survival_data))
# Check the first few rows of the dataset
head(survival_data)
# Check the structure of the dataset to understand the column names and types
str(survival_data)
# Extract the status and time columns
# Replace 'status_column_name' and 'time_column_name' with the actual column names from the dataset
status <- survival_data$status
time <- survival_data$time
# Call the survCurv function
survCurv(status, time)
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document()
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
rm(list = c("survCurv"))
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::load_all("/Users/liyunxiao/Desktop/BMI510/Final")
devtools::document("/Users/liyunxiao/Desktop/BMI510/Final")
devtool：：document（）
devtools::document()
# 设置工作目录为包的根目录
setwd("/Users/liyunxiao/Desktop/BMI510/Final")
# 尝试重新生成文档
devtools::document()
devtools::install(".")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(logLikBernoulliPkg)
library(logLikBernoulliPkg)
?myFunction
library(logLikBernoulliPkg)
# Read the CSV file directly from the URL
survival_data <- read.csv(url)
print(head(survival_data))
# Check the first few rows of the dataset
head(survival_data)
# Check the structure of the dataset to understand the column names and types
str(survival_data)
# Extract the status and time columns
# Replace 'status_column_name' and 'time_column_name' with the actual column names from the dataset
status <- survival_data$status
time <- survival_data$time
# Call the survCurv function
survCurv(status, time)
devtools::load_all(".")
devtools::document()
